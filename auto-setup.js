const { exec } = require('child_process')
const { promisify } = require('util')
const os = require('os')

const execAsync = promisify(exec)

class AutoSetup {
  constructor() {
    this.platform = os.platform()
    this.isLinux = this.platform === 'linux'
    this.isWindows = this.platform === 'win32'
  }

  async checkAndInstallDrivers() {
    console.log('üîç Verificando drivers de impresi√≥n t√©rmica...')

    try {
      // Verificar si ya est√° configurado
      if (await this.isPrinterConfigured()) {
        console.log('‚úÖ Drivers ya configurados correctamente')
        return true
      }

      console.log('‚öôÔ∏è  Drivers no encontrados. Instalando autom√°ticamente...')
      return await this.installDrivers()

    } catch (error) {
      console.log('‚ö†Ô∏è  Error verificando drivers:', error.message)
      return await this.installDrivers()
    }
  }

  async isPrinterConfigured() {
    if (this.isLinux) {
      try {
        const { stdout } = await execAsync('lpstat -p 2>/dev/null')
        if (stdout.includes('ALBARAN') || stdout.includes('Albaranes')) {

          // Verificar configuraci√≥n actual
          console.log('üîç Verificando configuraci√≥n actual de impresora...')

          try {
            // Verificar el modelo de la impresora
            const { stdout: printerInfo } = await execAsync('lpstat -l -p Albaranes 2>/dev/null || lpstat -l -p ALBARAN 2>/dev/null || echo ""')

            if (printerInfo.includes('PostScript') ||
                printerInfo.includes('DesignJet') ||
                printerInfo.includes('HP') ||
                printerInfo.includes('T920')) {

              console.log('‚ö†Ô∏è  Impresora configurada incorrectamente como PostScript/HP')
              console.log('üîß Reconfigurando autom√°ticamente a RAW para ESC/POS...')

              // Reconfigurar autom√°ticamente
              await this.fixCupsConfiguration()
              return true // Ya est√° arreglada
            }

            console.log('‚úÖ Impresora ya configurada correctamente como RAW')
            return true
          } catch (checkError) {
            console.log('‚ö†Ô∏è  No se pudo verificar configuraci√≥n, forzando reconfiguraci√≥n...')
            await this.fixCupsConfiguration()
            return true
          }
        }
        return false
      } catch {
        return false
      }
    }

    if (this.isWindows) {
      try {
        const { stdout } = await execAsync('wmic printer get name')
        return stdout.includes('ALBARAN') || stdout.includes('Albaranes')
      } catch {
        return false
      }
    }

    return false
  }

  async fixCupsConfiguration() {
    try {
      console.log('üóëÔ∏è  Eliminando configuraci√≥n PostScript incorrecta...')

      // Eliminar impresoras mal configuradas
      await execAsync('sudo lpadmin -x ALBARAN 2>/dev/null || true')
      await execAsync('sudo lpadmin -x Albaranes 2>/dev/null || true')

      console.log('üñ®Ô∏è  Configurando impresoras como RAW para ESC/POS...')

      // Configurar ALBARAN como RAW
      await execAsync('sudo lpadmin -p ALBARAN -v usb://Unknown/Printer -m raw -E')
      await execAsync('sudo lpoptions -p ALBARAN -o raw')
      await execAsync('sudo cupsenable ALBARAN')
      await execAsync('sudo cupsaccept ALBARAN')

      // Configurar Albaranes como RAW
      await execAsync('sudo lpadmin -p Albaranes -v usb://Unknown/Printer -m raw -E')
      await execAsync('sudo lpoptions -p Albaranes -o raw')
      await execAsync('sudo cupsenable Albaranes')
      await execAsync('sudo cupsaccept Albaranes')

      // Configurar como predeterminada
      await execAsync('sudo lpadmin -d Albaranes')

      console.log('üîÑ Reiniciando CUPS para aplicar cambios...')
      await execAsync('sudo systemctl restart cups')

      console.log('‚úÖ Configuraci√≥n CUPS corregida autom√°ticamente')
      return true

    } catch (error) {
      console.log('‚ùå Error corrigiendo CUPS:', error.message)
      return false
    }
  }

  async installDrivers() {
    console.log(`üñ•Ô∏è  Sistema detectado: ${this.platform}`)

    if (this.isLinux) {
      return await this.installLinuxDrivers()
    }

    if (this.isWindows) {
      return await this.installWindowsDrivers()
    }

    console.log('‚ö†Ô∏è  Sistema no soportado para instalaci√≥n autom√°tica')
    return false
  }

  async installLinuxDrivers() {
    try {
      console.log('üêß Configurando drivers para Ubuntu/Linux...')

      // Verificar si CUPS est√° instalado
      try {
        await execAsync('which lpstat')
        console.log('‚úÖ CUPS ya est√° instalado')
      } catch {
        console.log('üì¶ Instalando CUPS...')
        console.log('üîê Solicitando permisos sudo para instalar CUPS...')
        await execAsync('sudo apt update && sudo apt install -y cups cups-client cups-bsd lpr')
        console.log('‚úÖ CUPS instalado')
      }

      // A√±adir usuario al grupo lp
      console.log('üë• Configurando permisos de usuario...')
      await execAsync(`sudo usermod -a -G lp $USER`)
      console.log('‚úÖ Usuario a√±adido al grupo lp')

      // Configurar impresoras RAW (usar funci√≥n dedicada)
      console.log('üñ®Ô∏è  Configurando impresoras t√©rmicas...')
      await this.fixCupsConfiguration()

      console.log('‚úÖ Instalaci√≥n Linux completada')
      console.log('üí° Impresoras configuradas para ESC/POS')

      return true

    } catch (error) {
      console.log('‚ùå Error instalando drivers Linux:', error.message)
      return false
    }
  }

  async installWindowsDrivers() {
    try {
      console.log('ü™ü Configurando drivers para Windows...')

      // Verificar permisos de administrador
      try {
        await execAsync('net session >nul 2>&1')
      } catch {
        console.log('‚ö†Ô∏è  Se requieren permisos de administrador')
        console.log('   Ejecuta como administrador o configura manualmente')
        return false
      }

      // Instalar impresora gen√©rica como ALBARAN
      console.log('üñ®Ô∏è  Instalando impresora t√©rmica...')
      await execAsync('rundll32 printui.dll,PrintUIEntry /if /b "ALBARAN" /f "%windir%\\inf\\ntprint.inf" /r "nul:" /m "Generic / Text Only"')

      // Instalar tambi√©n como Albaranes
      await execAsync('rundll32 printui.dll,PrintUIEntry /if /b "Albaranes" /f "%windir%\\inf\\ntprint.inf" /r "nul:" /m "Generic / Text Only"')

      // Configurar como predeterminada
      await execAsync('rundll32 printui.dll,PrintUIEntry /y /n "ALBARAN"')

      console.log('‚úÖ Instalaci√≥n Windows completada')
      return true

    } catch (error) {
      console.log('‚ùå Error instalando drivers Windows:', error.message)
      console.log('üí° Sugerencia: Ejecuta como administrador')
      return false
    }
  }

  async checkPrinterConnection() {
    console.log('üîå Verificando conexi√≥n de impresora...')

    if (this.isLinux) {
      try {
        const { stdout } = await execAsync('lsusb')
        if (stdout.toLowerCase().includes('printer') ||
            stdout.toLowerCase().includes('pos') ||
            stdout.toLowerCase().includes('thermal')) {
          console.log('‚úÖ Impresora USB detectada')
          return true
        }
      } catch {}
    }

    console.log('‚ö†Ô∏è  No se detect√≥ impresora USB. Aseg√∫rate de que est√© conectada y encendida.')
    return false
  }
}

module.exports = AutoSetup