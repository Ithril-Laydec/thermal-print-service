const express = require('express')
const cors = require('cors')
const { ThermalPrinter, PrinterTypes, CharacterSet } = require('node-thermal-printer')
const escpos = require('@node-escpos/core')
const USB = require('@node-escpos/usb-adapter')
const iconv = require('iconv-lite')
const { PORT, HOST } = require('./config')
const { exec } = require('child_process')
const { promisify } = require('util')
const AutoSetup = require('./auto-setup')

const execAsync = promisify(exec)
const app = express()

app.use(cors())
app.use(express.json())

// ============================================================================
// HELPER FUNCTIONS - Funciones auxiliares de codificaci√≥n
// ============================================================================

// Normalizar caracteres Unicode que NO existen en CP858
// CP858 solo tiene 256 caracteres (ASCII + Europa), sin emojis ni Unicode avanzado
function normalizeUnicodeForCP858(text) {
  return text
    // Box drawing / L√≠neas decorativas
    .replace(/[‚îÄ‚ïê‚îÅ]/g, '=')   // L√≠neas horizontales ‚Üí igual
    .replace(/[‚îÇ‚ïë‚îÉ]/g, '|')   // L√≠neas verticales ‚Üí pipe
    .replace(/[‚îå‚îê‚îî‚îò‚îú‚î§‚î¨‚î¥‚îº]/g, '+')  // Esquinas ‚Üí plus

    // Bullets / Vi√±etas
    .replace(/[‚Ä¢‚óè‚àô‚ó¶]/g, '*')  // Bullets ‚Üí asterisco
    .replace(/[‚ñ™‚ñ´]/g, '-')    // Cuadrados ‚Üí gui√≥n

    // Checkmarks / Marcas
    .replace(/[‚úì‚úî]/g, 'OK')   // Check simple ‚Üí OK
    .replace(/[‚úÖ]/g, '[OK]')  // Emoji check ‚Üí [OK]
    .replace(/[‚úó‚úò]/g, 'X')    // Cross ‚Üí X
    .replace(/[‚ùå]/g, '[X]')   // Emoji cross ‚Üí [X]

    // Emojis comunes
    .replace(/[üß™]/g, '[TEST]')
    .replace(/[‚ú®]/g, '*')
    .replace(/[üéâ]/g, '!')
    .replace(/[‚ö†Ô∏è]/g, '!')
    .replace(/[üîß]/g, '[CONFIG]')
    .replace(/[üìÑ]/g, '[DOC]')

    // Quotes / Comillas
    .replace(/[""]/g, '"')    // Smart quotes ‚Üí comillas normales
    .replace(/['']/g, "'")    // Smart apostrophes
    .replace(/[¬´¬ª]/g, '"')    // Comillas angulares

    // Otros s√≠mbolos
    .replace(/[‚Ä¶]/g, '...')   // Ellipsis
    .replace(/[‚Äî‚Äì]/g, '-')    // Em dash, en dash ‚Üí gui√≥n

    // Flechas
    .replace(/[‚Üí‚áí‚ûú‚ûî]/g, '->')
    .replace(/[‚Üê‚áê]/g, '<-')
    .replace(/[‚Üë]/g, '^')
    .replace(/[‚Üì]/g, 'v')
}

// Funci√≥n MEJORADA: Convertir texto UTF-8 ‚Üí CP858 con iconv-lite
function encodeTextForPrinter(text, encoding = 'CP858') {
  try {
    // Paso 1: Normalizar caracteres Unicode que no existen en CP858
    const normalizedText = normalizeUnicodeForCP858(text)

    // Paso 2: Convertir UTF-8 ‚Üí CP858 (incluye ‚Ç¨ y tildes espa√±olas)
    const buffer = iconv.encode(normalizedText, encoding)
    return { buffer, success: true, encoding }
  } catch (error) {
    console.log(`‚ö†Ô∏è  Error codificando con ${encoding}:`, error.message)
    // Fallback: convertir manualmente
    const fallbackText = normalizeUnicodeForCP858(text)
      .replace(/‚Ç¨/g, 'EUR')
      .replace(/[√°√†√§√¢]/g, 'a')
      .replace(/[√©√®√´√™]/g, 'e')
      .replace(/[√≠√¨√Ø√Æ]/g, 'i')
      .replace(/[√≥√≤√∂√¥]/g, 'o')
      .replace(/[√∫√π√º√ª]/g, 'u')
      .replace(/√±/g, 'n')
      .replace(/[√Å√Ä√Ñ√Ç]/g, 'A')
      .replace(/[√â√à√ã√ä]/g, 'E')
      .replace(/[√ç√å√è√é]/g, 'I')
      .replace(/[√ì√í√ñ√î]/g, 'O')
      .replace(/[√ö√ô√ú√õ]/g, 'U')
      .replace(/√ë/g, 'N')
      .replace(/¬ø/g, '?')
      .replace(/¬°/g, '!')
    return { buffer: Buffer.from(fallbackText, 'ascii'), success: false, encoding: 'ASCII-fallback' }
  }
}

// ============================================================================
// PRINTER DETECTION & CONFIGURATION
// ============================================================================

// Detectar impresoras t√©rmicas disponibles
async function detectThermalPrinters() {
  try {
    console.log('üîç Detectando impresoras t√©rmicas...')

    // Detectar impresoras USB
    const { stdout: lsusbOutput } = await execAsync('lsusb')
    console.log('üîå Dispositivos USB detectados')

    // Detectar impresoras CUPS
    const { stdout: cupsPrinters } = await execAsync('lpstat -p -d 2>/dev/null || echo "No CUPS printers"')
    console.log('üñ®Ô∏è  Impresoras CUPS:', cupsPrinters.trim())

    // Buscar dispositivos serie
    const { stdout: serialDevs } = await execAsync('ls /dev/tty* 2>/dev/null | grep -E "(USB|ACM)" || echo "No serial devices"')
    console.log('üì° Dispositivos serie:', serialDevs.trim())

    return {
      usb: lsusbOutput,
      cups: cupsPrinters,
      serial: serialDevs
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  No se pudieron detectar todas las impresoras:', error.message)
    return null
  }
}

// Configurar impresora - versi√≥n simple y robusta
async function createPrinter() {
  console.log('üîß Configurando impresora t√©rmica...')

  // Lista de configuraciones probadas de m√°s espec√≠fica a m√°s general
  const configs = [
    // Tu configuraci√≥n espec√≠fica RAW
    { name: 'Albaranes (RAW)', type: PrinterTypes.EPSON, interface: 'printer:Albaranes' },
    { name: 'ALBARAN (RAW)', type: PrinterTypes.EPSON, interface: 'printer:ALBARAN' },

    // Dispositivos USB directos (bypass CUPS)
    { name: 'USB directo lp0', type: PrinterTypes.EPSON, interface: '/dev/usb/lp0' },
    { name: 'USB directo lp1', type: PrinterTypes.EPSON, interface: '/dev/usb/lp1' },

    // Configuraci√≥n por defecto del sistema
    { name: 'Auto detectar', type: PrinterTypes.EPSON, interface: 'printer:auto' },

    // Fallback con diferentes tipos
    { name: 'STAR auto', type: PrinterTypes.STAR, interface: 'printer:auto' },
  ]

  for (const config of configs) {
    try {
      console.log(`üß™ Probando: ${config.name} (${config.interface})`)

      const printer = new ThermalPrinter({
        type: config.type,
        interface: config.interface,
        characterSet: CharacterSet.PC850_MULTILINGUAL,
        width: 48,
        removeSpecialCharacters: true,
        lineCharacter: "=",
      })

      // Test b√°sico para verificar funcionamiento
      try {
        printer.clear()
        printer.println('TEST')

        console.log(`‚úÖ Impresora configurada exitosamente: ${config.name}`)
        return printer

      } catch (testError) {
        console.log(`‚ö†Ô∏è  Test fall√≥ para ${config.name}: ${testError.message}`)
        continue
      }

    } catch (error) {
      console.log(`‚ùå Fall√≥ ${config.name}: ${error.message}`)
      continue
    }
  }

  // √öltima opci√≥n: configuraci√≥n ultra-b√°sica
  console.log('üîß Intentando configuraci√≥n ultra-b√°sica...')
  try {
    const basicPrinter = new ThermalPrinter({
      type: PrinterTypes.EPSON,
      interface: '/dev/usb/lp0',
      characterSet: CharacterSet.PC850_MULTILINGUAL,
      width: 48,
      removeSpecialCharacters: true,
    })

    console.log('‚úÖ Configuraci√≥n ultra-b√°sica creada')
    return basicPrinter

  } catch (error) {
    throw new Error(`No se pudo configurar ninguna impresora: ${error.message}`)
  }
}

// Funci√≥n de fallback: impresi√≥n directa bypass librer√≠a
async function printDirectToDevice(text) {
  console.log('üîß Usando impresi√≥n directa (bypass librer√≠a)...')

  const fs = require('fs').promises

  // Codificar texto con iconv-lite a CP858
  const encoded = encodeTextForPrinter(text, 'CP858')
  console.log(`   Codificaci√≥n: ${encoded.encoding}`)

  // Construir comandos ESC/POS como Buffer binario
  const header = Buffer.from([
    0x1B, 0x40,       // ESC @ - Inicializar
    0x1B, 0x74, 0x13, // ESC t 19 - CP858
    0x1B, 0x61, 0x01, // ESC a 1 - Centrar
    0x1B, 0x45, 0x01  // ESC E 1 - Negrita ON
  ])

  const titleBuffer = iconv.encode('=== TICKET ===\n', 'CP858')

  const formatBuffer = Buffer.from([
    0x1B, 0x45, 0x00, // ESC E 0 - Negrita OFF
    0x1B, 0x61, 0x00, // ESC a 0 - Izquierda
    0x0A              // Newline
  ])

  const footer = Buffer.from([
    0x0A, 0x0A,       // Newlines
    0x1D, 0x56, 0x00  // GS V 0 - Cortar
  ])

  const escPosBuffer = Buffer.concat([
    header,
    titleBuffer,
    formatBuffer,
    encoded.buffer,
    footer
  ])

  // Intentar escribir directamente a dispositivos
  const devices = ['/dev/usb/lp0', '/dev/usb/lp1', '/dev/lp0', '/dev/lp1']

  for (const device of devices) {
    try {
      console.log(`üì§ Intentando escribir directamente a ${device}...`)
      await fs.writeFile(device, escPosBuffer)
      console.log(`‚úÖ Impresi√≥n directa exitosa en ${device}`)
      return device
    } catch (error) {
      console.log(`‚ùå Fall√≥ ${device}: ${error.message}`)
      continue
    }
  }

  throw new Error('No se pudo acceder a ning√∫n dispositivo de impresi√≥n')
}

// Funci√≥n para configurar p√°gina de c√≥digos ESC/POS
function getCodePageCommands() {
  const ESC = '\x1B'
  return [
    ESC + '@',           // Inicializar impresora
    ESC + 't' + '\x13',  // Configurar p√°gina de c√≥digos CP850 (Europa - incluye ‚Ç¨ y tildes)
    // Alternativa: ESC + 't' + '\x10' para CP1252 si CP850 no funciona
  ]
}

// Funci√≥n para convertir caracteres SOLO si es necesario
function fixSpecialCharacters(text, fallbackMode = false) {
  if (!fallbackMode) {
    // Intentar primero SIN conversi√≥n - las impresoras modernas deber√≠an soportar UTF-8/CP850
    return text
  }

  // Solo usar conversiones como √∫ltimo recurso
  const charMap = {
    '√°': 'a', '√©': 'e', '√≠': 'i', '√≥': 'o', '√∫': 'u',
    '√Å': 'A', '√â': 'E', '√ç': 'I', '√ì': 'O', '√ö': 'U',
    '√±': 'n', '√ë': 'N',
    '√º': 'u', '√ú': 'U',
    '‚Ç¨': 'EUR', // Solo como √∫ltimo recurso
    '¬∞': 'o',
    '√ß': 'c', '√á': 'C'
  }

  let fixedText = text
  for (const [char, replacement] of Object.entries(charMap)) {
    fixedText = fixedText.replace(new RegExp(char, 'g'), replacement)
  }

  return fixedText
}

// Funci√≥n de fallback: usar lpr directamente (M√âTODO QUE FUNCIONA)
async function printWithLpr(text) {
  console.log('üîß Intentando impresi√≥n con lpr...')

  const { exec } = require('child_process')
  const { promisify } = require('util')
  const execAsync = promisify(exec)

  // M√âTODO MEJORADO: Usar iconv-lite para conversi√≥n real
  const attempts = [
    // M√©todo 1: CP858 con iconv-lite (RECOMENDADO - incluye ‚Ç¨ y tildes)
    {
      name: 'CP858 con iconv-lite (‚Ç¨ + tildes)',
      encoding: 'CP858',
      useCodePage: '\x13', // ESC t 19 - CP858
      description: '(Conversi√≥n real UTF-8 ‚Üí CP858)'
    },
    // M√©todo 2: CP850 con iconv-lite (tildes, sin ‚Ç¨)
    {
      name: 'CP850 con iconv-lite (tildes)',
      encoding: 'CP850',
      useCodePage: '\x13', // ESC t 19 - CP850
      description: '(Conversi√≥n real UTF-8 ‚Üí CP850)'
    },
    // M√©todo 3: ISO-8859-15 con iconv-lite (Latin-9 con ‚Ç¨)
    {
      name: 'ISO-8859-15 con iconv-lite',
      encoding: 'ISO-8859-15',
      useCodePage: '\x0F', // ESC t 15 - ISO-8859-15
      description: '(Latin-9 con ‚Ç¨ nativo)'
    },
    // M√©todo 4: Windows-1252 con iconv-lite
    {
      name: 'Windows-1252 con iconv-lite',
      encoding: 'Windows-1252',
      useCodePage: '\x10', // ESC t 16 - CP1252
      description: '(Windows Latin con ‚Ç¨)'
    },
    // M√©todo 5: Conversi√≥n manual completa (fallback seguro)
    {
      name: 'Conversi√≥n manual ASCII',
      encoding: null, // Usar conversi√≥n manual
      useCodePage: false,
      description: '(Fallback manual - SEGURO)'
    }
  ]

  const printers = ['Albaranes', 'ALBARAN', 'auto']

  for (const attempt of attempts) {
    console.log(`üß™ Probando: ${attempt.name}`)

    // Codificar texto seg√∫n el m√©todo
    let textBuffer
    if (attempt.encoding) {
      const encoded = encodeTextForPrinter(text, attempt.encoding)
      textBuffer = encoded.buffer
      console.log(`   Codificaci√≥n: ${encoded.encoding} (${encoded.success ? 'exitosa' : 'fallback'})`)
    } else {
      // Fallback manual
      textBuffer = encodeTextForPrinter(text, 'ASCII').buffer
    }

    // Construir comandos ESC/POS como Buffer binario
    const header = []

    // Inicializar impresora
    header.push(0x1B, 0x40) // ESC @

    // Configurar p√°gina de c√≥digos si se solicita
    if (attempt.useCodePage) {
      header.push(0x1B, 0x74, attempt.useCodePage.charCodeAt(0)) // ESC t [codepage]
    }

    // Formato del ticket
    header.push(0x1B, 0x61, 0x01) // ESC a 1 - Centrar
    header.push(0x1B, 0x45, 0x01) // ESC E 1 - Negrita ON

    const titleBuffer = iconv.encode('=== TICKET ===\n', attempt.encoding || 'ASCII')

    const formatBuffer = Buffer.from([
      0x1B, 0x45, 0x00, // ESC E 0 - Negrita OFF
      0x1B, 0x61, 0x00, // ESC a 0 - Alinear izquierda
      0x0A              // Newline
    ])

    const footer = Buffer.from([
      0x0A, 0x0A,       // Newlines
      0x1B, 0x64, 0x03, // ESC d 3 - Avanzar papel
      0x1D, 0x56, 0x41, 0x03 // GS V A 3 - Cortar papel
    ])

    // Combinar todos los buffers
    const escPosBuffer = Buffer.concat([
      Buffer.from(header),
      titleBuffer,
      formatBuffer,
      textBuffer,
      footer
    ])

    for (const printer of printers) {
      try {
        console.log(`üì§ Intentando lpr con impresora ${printer}...`)

        // Crear archivo temporal para enviar comandos ESC/POS como Buffer binario
        const fs = require('fs')
        const path = require('path')
        const tmpFile = path.join(__dirname, 'tmp_ticket.bin')

        // Escribir buffer binario (NO texto)
        fs.writeFileSync(tmpFile, escPosBuffer)

        const command = printer === 'auto'
          ? `lpr -o raw "${tmpFile}"`
          : `lpr -P ${printer} -o raw "${tmpFile}"`

        await execAsync(command)

        // Limpiar archivo temporal
        fs.unlinkSync(tmpFile)

        console.log(`‚úÖ Impresi√≥n exitosa con ${printer} usando ${attempt.name}`)
        console.log(`   ${attempt.description}`)
        return `${printer} (${attempt.name})`

      } catch (error) {
        console.log(`‚ùå Error con ${printer} (${attempt.name}):`, error.message)

        // Limpiar archivo temporal en caso de error
        try {
          const fs = require('fs')
          const path = require('path')
          const tmpFile = path.join(__dirname, 'tmp_ticket.bin')
          if (fs.existsSync(tmpFile)) fs.unlinkSync(tmpFile)
        } catch {}
      }
    }
  }

  throw new Error('No se pudo imprimir con lpr en ning√∫n modo')
}

// üÜï NUEVO M√âTODO: usar @node-escpos/core con CP858 (‚Ç¨ y tildes autom√°ticos)
async function printWithNodeEscpos(text) {
  console.log('üÜï Intentando @node-escpos/core con CP858...')

  // Configuraciones a probar
  const attempts = [
    {
      name: 'CP858 (Euro + tildes espa√±olas)',
      encoding: 'CP858',
      description: '(‚Ç¨ y √°√©√≠√≥√∫√± autom√°ticos)'
    },
    {
      name: 'CP1252 (Windows Latin)',
      encoding: 'CP1252',
      description: '(Windows con ‚Ç¨)'
    },
    {
      name: 'ISO-8859-15 (Latin-9 con ‚Ç¨)',
      encoding: 'ISO-8859-15',
      description: '(Euro est√°ndar)'
    },
    {
      name: 'UTF-8',
      encoding: 'UTF-8',
      description: '(Unicode completo)'
    }
  ]

  const printers = ['Albaranes', 'ALBARAN']

  for (const attempt of attempts) {
    console.log(`üß™ Probando: ${attempt.name}`)

    for (const printerName of printers) {
      try {

        // Configurar la impresora con encoding espec√≠fico
        const device = new USB()
        const options = { encoding: attempt.encoding, width: 48 }
        const printer = new escpos.Printer(device, options)

        // Abrir conexi√≥n
        await new Promise((resolve, reject) => {
          device.open((error) => {
            if (error) reject(error)
            else resolve()
          })
        })

        // Imprimir con formato
        printer
          .font('a')
          .align('ct')
          .style('bu')
          .size(1, 1)
          .text('=== TICKET ===')
          .text('')
          .align('lt')
          .style('normal')
          .text(text) // ¬°El texto SIN conversi√≥n!
          .text('')
          .text('')
          .cut()

        // Cerrar e imprimir
        await new Promise((resolve, reject) => {
          printer.close((error) => {
            if (error) reject(error)
            else resolve()
          })
        })

        console.log(`‚úÖ @node-escpos exitoso con ${printerName} usando ${attempt.name}`)
        console.log(`   ${attempt.description}`)
        return `${printerName} (@node-escpos ${attempt.name})`

      } catch (error) {
        console.log(`‚ùå Error @node-escpos ${printerName} (${attempt.name}):`, error.message)
      }
    }
  }

  throw new Error('No se pudo imprimir con @node-escpos en ning√∫n modo')
}

// ‚úÖ ENDPOINT CON M√öLTIPLES FALLBACKS
app.post('/print/ticket', async (req, res) => {
  try {
    const { text } = req.body

    if (!text) {
      return res.status(400).json({ error: 'Falta el texto a imprimir' })
    }

    console.log('üñ®Ô∏è  Iniciando impresi√≥n...')
    console.log('üìÑ Texto:', text.substring(0, 50) + (text.length > 50 ? '...' : ''))
    console.log('üîç Caracteres especiales: ‚Ç¨ √ó' + (text.match(/‚Ç¨/g) || []).length + ', tildes √ó' + (text.match(/[√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë]/g) || []).length)

    let success = false
    let method = ''
    let details = ''

    // M√âTODO 1: Usar @node-escpos/core (NUEVO - MANEJA ‚Ç¨ Y TILDES AUTOM√ÅTICAMENTE)
    try {
      console.log('üÜï M√©todo 1: Intentando con @node-escpos/core (‚Ç¨ y tildes autom√°ticos)...')
      const printer = await printWithNodeEscpos(text)
      success = true
      method = '@node-escpos'
      details = `Impresi√≥n @node-escpos exitosa con ${printer}`

    } catch (escposError) {
      console.log('‚ùå M√©todo 1 (@node-escpos) fall√≥:', escposError.message)

      // M√âTODO 2: Usar lpr (EL M√âTODO ANTERIOR QUE FUNCIONABA)
      try {
        console.log('üöÄ M√©todo 2: Intentando con lpr (m√©todo anterior)...')
        const printer = await printWithLpr(text)
        success = true
        method = 'lpr'
        details = `Impresi√≥n lpr exitosa con ${printer}`

      } catch (lprError) {
        console.log('‚ùå M√©todo 2 (lpr) fall√≥:', lprError.message)

        // M√âTODO 3: Impresi√≥n directa a dispositivo
        try {
          console.log('üîß M√©todo 3: Intentando impresi√≥n directa...')
          const device = await printDirectToDevice(text)
          success = true
          method = 'direct-device'
          details = `Impresi√≥n directa exitosa en ${device}`

        } catch (directError) {
          console.log('‚ùå M√©todo 3 fall√≥:', directError.message)

          // M√âTODO 4: Intentar con node-thermal-printer (librer√≠a antigua)
          try {
            console.log('üîß M√©todo 4: Intentando con node-thermal-printer (librer√≠a antigua)...')
            const printer = await createPrinter()

            // Corregir caracteres especiales
            const cleanText = fixSpecialCharacters(text)

            printer.clear()
            printer.alignCenter()
            printer.bold(true)
            printer.println('=== TICKET ===')
            printer.bold(false)
            printer.newLine()

            printer.alignLeft()
            const lines = cleanText.split('\n')
            lines.forEach(line => {
              if (line.trim()) {
                printer.println(line.trim())
              } else {
                printer.newLine()
              }
            })

            printer.newLine()
            printer.cut()

            await printer.execute()

            success = true
            method = 'node-thermal-printer'
            details = 'Impresi√≥n con librer√≠a exitosa'

          } catch (printerError) {
            console.log('‚ùå M√©todo 4 fall√≥:', printerError.message)
            throw new Error('Todos los m√©todos de impresi√≥n fallaron')
          }
        }
      }
    }

    if (success) {
      console.log(`‚úÖ Ticket impreso correctamente usando: ${method}`)
      res.json({
        success: true,
        message: 'Ticket impreso correctamente',
        method: method,
        details: details,
        timestamp: new Date().toISOString()
      })
    }

  } catch (error) {
    console.error('‚ùå Error al imprimir:', error.message)

    res.status(500).json({
      error: 'Error al imprimir',
      details: error.message,
      suggestions: [
        'Verifica que la impresora est√© conectada y encendida',
        'Verifica permisos: sudo chmod 666 /dev/usb/lp0',
        'Verifica CUPS: lpstat -p'
      ]
    })
  }
})

// Endpoint para verificar si el servicio est√° funcionando
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'thermal-print-service',
    port: PORT,
    timestamp: new Date().toISOString()
  })
})

// Endpoint para listar impresoras disponibles
app.get('/printers', async (req, res) => {
  try {
    console.log('üîç Solicitada detecci√≥n de impresoras...')
    const detection = await detectThermalPrinters()

    res.json({
      message: 'Detecci√≥n de impresoras completada',
      detection: detection,
      availableInterfaces: [
        'printer:auto',
        '/dev/usb/lp0',
        '/dev/usb/lp1',
        'tcp://192.168.1.100:9100'
      ]
    })
  } catch (error) {
    console.error('‚ùå Error detectando impresoras:', error.message)
    res.status(500).json({ error: error.message })
  }
})

// Endpoint de diagn√≥stico completo
app.get('/diagnostics', async (req, res) => {
  try {
    console.log('üîç Ejecutando diagn√≥stico completo...')

    const detection = await detectThermalPrinters()

    // Intentar crear una impresora para verificar configuraci√≥n
    let printerConfig = null
    let printerError = null

    try {
      await createPrinter()
      printerConfig = 'Configuraci√≥n exitosa'
    } catch (error) {
      printerError = error.message
    }

    res.json({
      service: 'thermal-print-service',
      status: 'running',
      port: PORT,
      timestamp: new Date().toISOString(),
      detection: detection,
      printerConfiguration: {
        success: !!printerConfig,
        message: printerConfig || printerError
      },
      recommendations: printerError ? [
        'Verifica que la impresora est√© conectada y encendida',
        'Ejecuta: npm run install-drivers',
        'Comprueba que existe impresora "ALBARAN" o "Albaranes" en CUPS'
      ] : ['Todo configurado correctamente']
    })
  } catch (error) {
    res.status(500).json({
      error: 'Error en diagn√≥stico',
      details: error.message
    })
  }
})

async function startServer() {
  console.log('üöÄ Iniciando servicio de impresi√≥n t√©rmica...')
  console.log('=' .repeat(50))

  // 1. AUTO-SETUP INTELIGENTE ü§ñ
  // Este proceso detecta y corrige autom√°ticamente:
  // - Instala CUPS si no existe
  // - Detecta si la impresora est√° mal configurada (PostScript ‚Üí RAW)
  // - Reconfigura autom√°ticamente para ESC/POS
  // - Aplica permisos de usuario
  // - Reinicia servicios cuando es necesario
  // ¬°TUS COMPA√ëEROS NO NECESITAN HACER NADA MANUAL!

  const autoSetup = new AutoSetup()
  console.log('üîß Verificando y configurando drivers autom√°ticamente...')

  try {
    const driversOk = await autoSetup.checkAndInstallDrivers()
    if (!driversOk) {
      console.log('‚ö†Ô∏è  Advertencia: Drivers no configurados √≥ptimamente')
      console.log('   El servicio continuar√°, pero puede tener problemas de impresi√≥n')
    }

    // 2. Verificar conexi√≥n de impresora
    await autoSetup.checkPrinterConnection()

  } catch (error) {
    console.log('‚ö†Ô∏è  Error en configuraci√≥n autom√°tica:', error.message)
    console.log('   El servicio continuar√° con configuraci√≥n b√°sica')
  }

  console.log('')
  console.log('üñ®Ô∏è  Iniciando servidor HTTP...')

  // 3. Ejecutar detecci√≥n de impresoras
  await detectThermalPrinters()

  // 4. Iniciar servidor
  app.listen(PORT, () => {
    console.log('')
    console.log('‚úÖ Servicio de impresi√≥n t√©rmica LISTO')
    console.log(`üì° Servidor ejecut√°ndose en http://${HOST}:${PORT}`)
    console.log(`üîß Endpoints disponibles:`)
    console.log(`   POST /print/ticket  - Imprimir ticket`)
    console.log(`   GET  /health        - Estado del servicio`)
    console.log(`   GET  /printers      - Impresoras disponibles`)
    console.log(`   GET  /diagnostics   - Diagn√≥stico completo`)
    console.log('')
    console.log('üéâ ¬°Todo listo! Usa tu aplicaci√≥n Vue normalmente')
    console.log('=' .repeat(50))
  })
}

// Manejar errores no capturados
process.on('uncaughtException', (error) => {
  console.log('‚ùå Error cr√≠tico:', error.message)
  console.log('üîÑ Reinicia el servicio: bun start')
  process.exit(1)
})

process.on('unhandledRejection', (error) => {
  console.log('‚ùå Error de promesa:', error.message)
})

// Iniciar servidor
startServer().catch(error => {
  console.log('‚ùå Error iniciando servidor:', error.message)
  console.log('')
  console.log('üîß Posibles soluciones:')
  console.log('   ‚Ä¢ Verifica que no haya otro servicio en el puerto', PORT)
  console.log('   ‚Ä¢ Ejecuta como administrador si es necesario')
  console.log('   ‚Ä¢ Verifica que la impresora est√© conectada')
  process.exit(1)
})