const { app, PORT, HOST } = require('./app')
const AutoSetup = require('./services/auto-setup')
const { detectThermalPrinters } = require('./utils/system')
const { checkForUpdates } = require('./utils/update-checker')
const packageJson = require('../package.json')

async function startServer() {
  console.log('üöÄ Iniciando servicio de impresi√≥n t√©rmica...')
  console.log('=' .repeat(50))

  // 1. AUTO-SETUP INTELIGENTE ü§ñ
  const autoSetup = new AutoSetup()
  console.log('üîß Verificando y configurando drivers autom√°ticamente...')

  try {
    const driversOk = await autoSetup.checkAndInstallDrivers()
    if (!driversOk) {
      console.log('‚ö†Ô∏è  Advertencia: Drivers no configurados √≥ptimamente')
      console.log('   El servicio continuar√°, pero puede tener problemas de impresi√≥n')
    }

    // 2. Verificar conexi√≥n de impresora
    await autoSetup.checkPrinterConnection()

  } catch (error) {
    console.log('‚ö†Ô∏è  Error en configuraci√≥n autom√°tica:', error.message)
    console.log('   El servicio continuar√° con configuraci√≥n b√°sica')
  }

  console.log('')
  console.log('üñ®Ô∏è  Iniciando servidor HTTP...')

  // 3. Ejecutar detecci√≥n de impresoras
  await detectThermalPrinters()

  // 4. Iniciar servidor
  app.listen(PORT, async () => {
    console.log('')
    console.log('‚úÖ Servicio de impresi√≥n t√©rmica LISTO')
    console.log(`üì° Servidor ejecut√°ndose en http://${HOST}:${PORT}`)
    console.log(`üì¶ Versi√≥n: ${packageJson.version}`)

    // 5. Verificar actualizaciones
    try {
      const updateInfo = await checkForUpdates()
      if (updateInfo.updateAvailable) {
        console.log('')
        console.log('üîî ACTUALIZACI√ìN DISPONIBLE!')
        console.log(`   Versi√≥n actual: ${updateInfo.currentVersion}`)
        console.log(`   Nueva versi√≥n: ${updateInfo.latestVersion}`)
        console.log(`   Actualiza con: git pull && npm install && npm start`)
        console.log('')
      }
    } catch (error) {
      // Silently fail update check
    }

    console.log(`üîß Endpoints disponibles:`)
    console.log(`   POST /print/ticket    - Imprimir ticket`)
    console.log(`   GET  /health          - Estado del servicio`)
    console.log(`   GET  /version         - Versi√≥n del servicio`)
    console.log(`   GET  /status          - Estado completo y diagn√≥stico`)
    console.log(`   GET  /printers        - Impresoras disponibles`)
    console.log(`   GET  /printer/check   - Verificar si impresora est√° disponible`)
    console.log(`   GET  /diagnostics     - Diagn√≥stico completo`)
    console.log('')
    console.log('üéâ ¬°Todo listo! Usa tu aplicaci√≥n Vue normalmente')
    console.log('=' .repeat(50))
  })
}

// Manejar errores no capturados
process.on('uncaughtException', (error) => {
  console.log('‚ùå Error cr√≠tico:', error.message)
  console.log('üîÑ Reinicia el servicio: npm start')
  process.exit(1)
})

process.on('unhandledRejection', (error) => {
  console.log('‚ùå Error de promesa:', error.message)
})

// Iniciar servidor
startServer().catch(error => {
  console.log('‚ùå Error iniciando servidor:', error.message)
  console.log('')
  console.log('üîß Posibles soluciones:')
  console.log('   ‚Ä¢ Verifica que no haya otro servicio en el puerto', PORT)
  console.log('   ‚Ä¢ Ejecuta como administrador si es necesario')
  console.log('   ‚Ä¢ Verifica que la impresora est√© conectada')
  process.exit(1)
})