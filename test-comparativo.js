#!/usr/bin/env node

const { PORT, HOST } = require('./config')
const http = require('http')

const testText = `COMPARACI√ìN DE LIBRER√çAS
üÜö @node-escpos VS lpr

Cliente: Jos√© Mar√≠a Pe√±a
Direcci√≥n: C/ Coraz√≥n de Mar√≠a, 15
Tel√©fono: +34 91 234 56 78

Productos:
‚Ä¢ Aceite motor 5W-40      28.90‚Ç¨
‚Ä¢ Filtro de aire          15.50‚Ç¨
‚Ä¢ Bater√≠a 12V             89.95‚Ç¨

Subtotal:                134.35‚Ç¨
IVA (21%):                28.21‚Ç¨
TOTAL:                   162.56‚Ç¨

¬øC√≥mo se ven?
‚Ä¢ ‚Ç¨ = s√≠mbolo de euro
‚Ä¢ √°,√©,√≠,√≥,√∫ = tildes
‚Ä¢ √± = e√±e espa√±ola
‚Ä¢ ¬°,¬ø = signos espa√±oles

¬°Adi√≥s! ¬øAlguna duda?`

function makeRequest(testNumber, description) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({ text: testText })

    const options = {
      hostname: HOST,
      port: PORT,
      path: '/print/ticket',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    }

    console.log(`\nüîÑ TEST ${testNumber}: ${description}`)
    console.log('=' .repeat(50))

    const req = http.request(options, (res) => {
      let data = ''

      res.on('data', (chunk) => {
        data += chunk
      })

      res.on('end', () => {
        try {
          const result = JSON.parse(data)
          console.log(`‚úÖ Resultado TEST ${testNumber}:`)
          console.log(`   M√©todo usado: ${result.method}`)
          console.log(`   Detalles: ${result.details}`)

          if (result.method.includes('@node-escpos')) {
            console.log('   üÜï NUEVA LIBRER√çA - ¬øSe ven ‚Ç¨ y tildes correctamente?')
          } else if (result.method.includes('lpr')) {
            console.log('   üîÑ M√âTODO ANTERIOR - Probablemente EUR y sin tildes')
          }

          resolve({
            test: testNumber,
            method: result.method,
            details: result.details,
            success: result.success
          })
        } catch (error) {
          reject(`Error parseando respuesta TEST ${testNumber}: ${data}`)
        }
      })
    })

    req.on('error', (error) => {
      reject(`Error TEST ${testNumber}: ${error.message}`)
    })

    req.write(postData)
    req.end()
  })
}

async function runComparison() {
  console.log('üÜö COMPARACI√ìN DE LIBRER√çAS PARA ‚Ç¨ Y TILDES')
  console.log('')
  console.log('üìÑ Vamos a imprimir el mismo texto y ver:')
  console.log('   ‚Ä¢ ¬øCu√°l m√©todo se usa primero?')
  console.log('   ‚Ä¢ ¬øSe ven ‚Ç¨ y tildes correctamente?')
  console.log('   ‚Ä¢ ¬øCu√°l es m√°s confiable?')
  console.log('')

  try {
    // Test 1: Primera impresi√≥n
    const result1 = await makeRequest(1, 'Primera impresi√≥n (m√©todo principal)')

    // Esperar un poco antes del segundo test
    await new Promise(resolve => setTimeout(resolve, 2000))

    // Test 2: Segunda impresi√≥n para confirmar consistencia
    const result2 = await makeRequest(2, 'Segunda impresi√≥n (confirmar consistencia)')

    // Esperar un poco antes del tercer test
    await new Promise(resolve => setTimeout(resolve, 2000))

    // Test 3: Tercera impresi√≥n
    const result3 = await makeRequest(3, 'Tercera impresi√≥n (validar estabilidad)')

    console.log('\nüìä RESUMEN DE RESULTADOS:')
    console.log('=' .repeat(50))

    const results = [result1, result2, result3]
    const methodCounts = {}

    results.forEach(result => {
      const method = result.method
      methodCounts[method] = (methodCounts[method] || 0) + 1
    })

    console.log('üî¢ M√©todos utilizados:')
    Object.entries(methodCounts).forEach(([method, count]) => {
      console.log(`   ${method}: ${count} veces`)
    })

    console.log('')
    console.log('üéØ AN√ÅLISIS:')

    if (results.every(r => r.method.includes('@node-escpos'))) {
      console.log('‚úÖ EXCELENTE: @node-escpos/core funciona consistentemente')
      console.log('   ‚Üí Deber√≠a mostrar ‚Ç¨ y tildes correctamente en todos los tickets')
      console.log('   ‚Üí La nueva librer√≠a es estable y confiable')
    } else if (results.every(r => r.method.includes('lpr'))) {
      console.log('‚ö†Ô∏è  FALLBACK: Cay√≥ al m√©todo lpr (anterior)')
      console.log('   ‚Üí La nueva librer√≠a tiene problemas de conexi√≥n/configuraci√≥n')
      console.log('   ‚Üí Ver√°s EUR en lugar de ‚Ç¨ y letras sin tildes')
    } else {
      console.log('üîÑ MIXTO: Resultados inconsistentes')
      console.log('   ‚Üí Hay problemas de estabilidad')
      console.log('   ‚Üí Revisar configuraci√≥n USB o permisos')
    }

    console.log('')
    console.log('üëÄ INSTRUCCIONES PARA VERIFICAR:')
    console.log('1. Revisa los 3 tickets impresos')
    console.log('2. Compara c√≥mo se ven:')
    console.log('   ‚Ä¢ ‚Ç¨ vs EUR')
    console.log('   ‚Ä¢ √°√©√≠√≥√∫√± vs aeioun')
    console.log('   ‚Ä¢ ¬°¬ø vs !?')
    console.log('3. Reporta cu√°l se ve mejor')

  } catch (error) {
    console.error('‚ùå Error en comparaci√≥n:', error)
    console.log('')
    console.log('üí° Aseg√∫rate de que el servidor est√© ejecut√°ndose:')
    console.log('   cd thermal-print-service && bun start')
  }
}

runComparison()