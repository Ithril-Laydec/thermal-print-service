#!/usr/bin/env node

/**
 * Test de impresi√≥n con iconv-lite (Soluci√≥n #1)
 *
 * Este test verifica que los caracteres especiales se impriman correctamente
 * usando conversi√≥n UTF-8 ‚Üí CP858 con iconv-lite.
 */

const { PORT, HOST } = require('./config')
const http = require('http')

const testData = {
  text: `PRUEBA ICONV-LITE
${new Date().toLocaleDateString('es-ES', { timeZone: 'Europe/Madrid' })}

‚ú® TEST CARACTERES ESPECIALES ‚ú®

Cliente: Jos√© Mar√≠a P√©rez
Direcci√≥n: C/ Coraz√≥n de Mar√≠a, 15
Tel√©fono: +34 91 234 56 78

Productos:
‚Ä¢ Pi√±√≥n de embrague     15.50‚Ç¨
‚Ä¢ Aceite motor 5W-40    28.90‚Ç¨
‚Ä¢ Bater√≠a 12V           89.95‚Ç¨

Subtotal:              134.35‚Ç¨
IVA (21%):              28.21‚Ç¨
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
TOTAL:                 162.56‚Ç¨

¬°Gracias! ¬øAlguna duda?

ESPERADO:
‚úì ‚Ç¨ ‚Üí s√≠mbolo de euro
‚úì √°,√©,√≠,√≥,√∫ ‚Üí con tildes
‚úì √± ‚Üí e√±e espa√±ola
‚úì ¬°,¬ø ‚Üí signos espa√±oles`
}

const postData = JSON.stringify(testData)

const options = {
  hostname: HOST,
  port: PORT,
  path: '/print/ticket',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData)
  }
}

console.log('üß™ TEST ICONV-LITE - Soluci√≥n #1')
console.log('=' .repeat(50))
console.log('')
console.log('üìã Caracteres especiales incluidos:')
console.log('   ‚Ä¢ ‚Ç¨ (euro)')
console.log('   ‚Ä¢ √°, √©, √≠, √≥, √∫ (tildes)')
console.log('   ‚Ä¢ √± (e√±e)')
console.log('   ‚Ä¢ ¬°, ¬ø (signos espa√±oles)')
console.log('')
console.log('üîÑ El servidor probar√° codificaciones en este orden:')
console.log('   1Ô∏è‚É£  CP858 (iconv-lite) - RECOMENDADO')
console.log('   2Ô∏è‚É£  CP850 (iconv-lite)')
console.log('   3Ô∏è‚É£  ISO-8859-15 (iconv-lite)')
console.log('   4Ô∏è‚É£  Windows-1252 (iconv-lite)')
console.log('   5Ô∏è‚É£  Fallback ASCII manual')
console.log('')
console.log('üì§ Enviando impresi√≥n...')
console.log('')

const req = http.request(options, (res) => {
  let data = ''

  res.on('data', (chunk) => {
    data += chunk
  })

  res.on('end', () => {
    try {
      const result = JSON.parse(data)
      console.log('‚úÖ Respuesta del servidor:')
      console.log('   Estado:', result.success ? '‚úì √âXITO' : '‚úó ERROR')
      console.log('   M√©todo:', result.method)
      console.log('   Detalles:', result.details)
      console.log('')

      if (result.method && result.method.includes('iconv-lite')) {
        console.log('üéâ ¬°PERFECTO! Se us√≥ iconv-lite (conversi√≥n real)')
        console.log('   Los caracteres ‚Ç¨ √° √© √≠ √≥ √∫ √± ¬° ¬ø deber√≠an verse correctamente')
      } else if (result.method && result.method.includes('manual')) {
        console.log('‚ö†Ô∏è  Se us√≥ conversi√≥n manual (fallback)')
        console.log('   Ver√°s EUR en lugar de ‚Ç¨, y letras sin tildes')
        console.log('   ‚Üí Verifica que iconv-lite est√© instalado: npm install iconv-lite')
      }

      console.log('')
      console.log('üëÄ Verifica el ticket impreso:')
      console.log('   ¬øSe ve ‚Ç¨ o EUR?')
      console.log('   ¬øSe ven las tildes correctamente?')
      console.log('   ¬øSe ve la √±?')
      console.log('')

    } catch (error) {
      console.error('‚ùå Error parseando respuesta:', data)
    }
  })
})

req.on('error', (error) => {
  console.error('‚ùå Error de conexi√≥n:', error.message)
  console.log('')
  console.log('üí° Soluciones:')
  console.log('   ‚Ä¢ Verifica que el servidor est√© corriendo: node server.js')
  console.log('   ‚Ä¢ Verifica el puerto:', PORT)
})

req.write(postData)
req.end()